---
import Layout from '@/layouts/Layout.astro'
import KinkiMap from '@/components/KinkiMap.tsx'
import { getRegularLocations, getOtherLocations } from '@/data/locations'

// 定例活動地のデータを取得
const regularLocations = getRegularLocations()

// 他団体との共同活動地のデータを取得
const otherLocations = getOtherLocations()
---

<Layout title="活動地紹介">
  <div class="mx-auto max-w-4xl">
    <h1 class="mb-8 text-3xl font-bold">活動地紹介</h1>

    <!-- 活動に参加するには -->
    <section class="bg-primary-50 mb-12 rounded-lg p-8">
      <h2 class="mb-4 text-2xl font-bold">活動に参加するには</h2>
      <p class="mb-6 text-gray-700">
        私たちの活動に興味のある方は、ぜひご参加ください。
        経験や知識は問いません。私たちと一緒に、自然を守る活動を始めましょう。
      </p>
      <div class="flex space-x-4">
        <a
          href="/join"
          class="bg-primary-600 hover:bg-primary-700 rounded-lg px-6 py-3 text-white transition-colors"
        >
          入会案内へ
        </a>
        <a
          href="/schedule"
          class="border-primary-600 text-primary-600 hover:bg-primary-50 rounded-lg border bg-white px-6 py-3 transition-colors"
        >
          活動予定を確認
        </a>
      </div>
    </section>

    <div class="border-primary-200 bg-primary-50 mb-6 rounded-lg border p-6">
      <h2 class="mb-2 text-lg font-bold text-gray-800">活動地の種類</h2>
      <p class="text-gray-700">当協会の活動地には、定例活動地と他団体との共同活動地があります。</p>
    </div>

    <!-- 活動地マップ -->
    <section class="map-section mb-12">
      <KinkiMap client:only="react" locations={regularLocations} />
    </section>

    <!-- 定例活動地 -->
    <section class="mb-12">
      <h2 class="mb-6 text-2xl font-bold text-gray-800">定例活動地</h2>
      <div class="rounded-lg bg-white p-6 shadow-lg">
        <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
          {
            regularLocations.map((location) => (
              <div>
                <img
                  src={
                    location.image ||
                    'https://images.unsplash.com/photo-1448375240586-882707db888b?w=600&auto=format&fit=crop&q=60'
                  }
                  alt={location.name}
                  class="mb-4 h-48 w-full rounded-lg object-cover"
                />
                <div class="mb-3 flex items-center justify-between">
                  <h3 class="text-xl font-bold">{location.name}</h3>
                  <button
                    onclick={`window.focusOnMap('${location.name}')`}
                    class="text-primary-600 hover:text-primary-700 cursor-pointer drop-shadow-sm transition-all duration-200 hover:scale-110"
                    title="地図で見る"
                  >
                    <svg class="h-8 w-8" fill="currentColor" viewBox="0 0 20 20">
                      <path
                        fill-rule="evenodd"
                        d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </button>
                </div>
                <p class="mb-4 text-gray-700">{location.description}</p>
                {location.activities && location.activities.length > 0 && (
                  <div class="mb-4 text-base text-gray-600">
                    {location.activities.map((activity) => (
                      <p>• {activity}</p>
                    ))}
                  </div>
                )}
                {location.hasDetail && (
                  <div class="mt-4 flex justify-end">
                    <a
                      href={`/locations/${location.id}`}
                      class="text-primary-600 hover:text-primary-800 inline-flex items-center text-base font-semibold"
                      title={`${location.name}の詳細ページへ`}
                    >
                      {location.name}の詳細
                      <i class="fas fa-arrow-right ml-1" />
                    </a>
                  </div>
                )}
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- 他団体との共同活動地 -->
    <section class="mb-12">
      <h2 class="mb-6 text-2xl font-bold text-gray-800">他団体との共同活動地</h2>
      <div class="rounded-lg bg-white p-6 shadow-lg">
        <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {
            otherLocations.map((location) => (
              <div>
                <img
                  src={
                    location.image ||
                    'https://images.unsplash.com/photo-1448375240586-882707db888b?w=600&auto=format&fit=crop&q=60'
                  }
                  alt={location.name}
                  class="mb-4 h-48 w-full rounded-lg object-cover"
                />
                <h3 class="mb-3 text-xl font-bold">{location.name}</h3>
                <p class="mb-4 text-gray-700">{location.description}</p>
                {location.activities && location.activities.length > 0 && (
                  <div class="mb-4 text-base text-gray-600">
                    {location.activities.map((activity) => (
                      <p>• {activity}</p>
                    ))}
                  </div>
                )}
                {location.hasDetail && (
                  <div class="mt-4 flex justify-end">
                    <a
                      href={`/locations/${location.id}`}
                      class="text-primary-600 hover:text-primary-800 inline-flex items-center text-base font-semibold"
                      title={`${location.name}の詳細ページへ`}
                    >
                      {location.name}の詳細
                      <i class="fas fa-arrow-right ml-1" />
                    </a>
                  </div>
                )}
              </div>
            ))
          }
        </div>
      </div>
    </section>
  </div>

  <script>
    // 地図で特定の場所にフォーカスする関数をグローバル関数として定義
    window.focusOnMap = function (locationName) {
      // クライアントサイドでのみ実行
      if (typeof window === 'undefined') return

      // 地図セクションにスクロール（ナビゲーションバーを考慮してオフセットを追加）
      const mapSection = document.querySelector('.map-section')
      if (mapSection) {
        const offset = 150 // ナビゲーションバーの高さ + 余裕分を増加
        const elementPosition = mapSection.offsetTop - offset

        window.scrollTo({
          top: elementPosition,
          behavior: 'smooth'
        })
      }

      // 少し遅延を入れてからイベントを発火（地図コンポーネントの初期化を待つ）
      setTimeout(() => {
        // カスタムイベントを発火
        const event = new CustomEvent('focusLocation', {
          detail: { location: locationName }
        })
        window.dispatchEvent(event)
      }, 1000)
    }
  </script>
</Layout>
